buddy documentation
===================
Andrey Antukh, <niwi@niwi.be>
0.1.2, 2014-05-01

:toc:
:numbered:


Introduction
------------

_buddy_ is a complete security library for clojure with support for:

- authentication, authorization & access rules (ring/compojure extensions)
- secure hash functions (digest)
- password hashing algorithms
- message/text signing (high level interface)
- signature & authentication (mac & digital signature)
- encryption (block & stream ciphers)
- key derivartion functions (kdf)

Obviously backed by battle tested link:http://www.bouncycastle.org/specifications.html[bouncy castle] library.

link:api/index.html[API reference documentation.]


Philosophy
~~~~~~~~~

Five most important rules:

- Beautiful is better than ugly
- Explicit is better than implicit
- Simple is better than complex
- Readability counts


Project Maturity
----------------

Since _buddy_ is a young project there can be some API breakage.


Install
-------

This section covers installing _buddy_.


Requirements
~~~~~~~~~~~~

_buddy_ has support for these jvm versions:

- JDK7
- JDK8


Leiningen
~~~~~~~~~

The simplest way to use _buddy_ in a Clojure project is by including
it as a dependency in your *_project.clj_*:

._in project.clj_
[source,clojure]
----
[buddy "0.1.2"]
----


Maven
~~~~~

Also, you can use it with maven. First, add the clojars repository:

[source,xml]
----
<repository>
    <id>clojars.org</id>
    <url>http://clojars.org/repo</url>
</repository>
----

Then for buddy:

[source,xml]
----
<dependency>
    <groupId>buddy</groupId>
    <artifactId>buddy</artifactId>
    <version>0.1.2</version>
</dependency>
----

Get the Code
~~~~~~~~~~~~

_buddy_ is opensource and is entirelly developed on link:https://github.com/niwibe/buddy[github].

You can clone the public repository with this command:

[source,text]
----
git clone https://github.com/niwibe/buddy
----


Core library
------------

Buddy is splitted in "two libraries", the low level interface
and high level interface.

Low level interface is located on `buddy.core` namespace and
has implementations for:

- cryptographyc hash algorithms
- key derivation algorithms
- digital signature
- message authentication (mac)
- cryptography algorithms (block & stream ciphers)


Cryptographic hash algorithms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

All hash algorithms are located on the `buddy.core.hash` namespace.

.Available hash algorithms
[options="header"]
|===============================================
| Hash algorithm name  | Digest size
| SHA1                 | 160
| SHA2                 | 256, 384, 512
| SHA3                 | 256, 384, 512
| MD5                  | 128
| Tiger                | 192
|===============================================

Basic usage
^^^^^^^^^^^

.Import namespace example:
[source, clojure]
----
(require '[buddy.core.hash :as hash])
(require '[buddy.core.codecs :refer :all])
----

.Usage examples:
[source, clojure]
----
(hash/sha256 "foo bar")
;; -> #<byte[] [B@162a657e>

(-> (hash/sha256 "foo bar")
    (bytes->hex))
;; -> "fbc1a9f858ea9e177916964bd88c3d37b91a1e84412765e29950777f265c4b75"
----


Advanced usage
^^^^^^^^^^^^^^

Hash functions are implemented using protocols and it can be extended
to other types. The default implementations also comes with implementation
for file like objects (*File*, *URL*, URI* and *InputStream*).

.Make hash of file example:
[source, clojure]
----
;; Additional import for easy open files
(require '[clojure.java.io :as io])

(-> (hash/sha256 (io/input-stream "/tmp/some-file"))
    (bytes->hex))
;; -> "bba878639499c8449f69efbfc699413eebfaf41d4b7a7faa560bfaf7e93a43dd"
----

You can extend it for your own types using the
*buddy.core.hash/Digest* protocol:

[source,clojure]
----
(defprotocol Digest
  (make-digest [data algorithm]))
----

[NOTE]
Functions like *sha256* are aliases for the more generic
function *digest*.


Message authentication code algorithms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Buddy comes with two mac implementations: *HMac* and *Poly1305*.

HMac
^^^^

There are two variants of hmac: simple and salted. Both are available
in `buddy.core.mac.hmac` namespace.

Basic usage
+++++++++++

[source, clojure]
----
;; Import required namespaces
(require '[buddy.core.mac.hmac :as hmac])
(require '[buddy.core.codecs :refer :all])

;; Generate sha256 hmac over string
(-> (hmac/hmac-sha256 "foo bar" "mysecretkey")
    (bytes->hex))
;; -> "61849448bdbb67b39d609471eead667e65b0d1b9e01b1c3bf7aa56b83e9c8083"

;; Same example but using salted variant
(-> (hmac/salted-hmac-sha256 "foo bar" "salt" "mysecretkey")
    (bytes->hex))
;; -> "bd5f7a0040430a73f4845bac8f980c6398b4baae8a22efcc22038be0f4dd9678"
----

The key parameter can be any type that implements the *ByteArray* protocol
defined on `buddy.core.codecs` namespace. It comes with default implementation for
`byte[]` and `java.lang.String`.


Advanced usage
++++++++++++++

Like hash functions, hmac is implemented using Clojure
protocols and it comes with default implementated for: String, byte[], 
*File*, *URL*, *URI* and *InputStream*.

[source,clojure]
----
(require '[clojure.java.io :as io])

;; Generate hmac for file
(-> (io/input-stream "/tmp/somefile")
    (hmac/hmac-sha256 "mysecretkey")
    (bytes->hex))
;; -> "4cb793e600848da2053238003fce4c010233c49df3e6a04119b4287eb464c27e"
----

You can extend it for your own types using `buddy.core.hmac/HMac` protocol:

[source,clojure]
----
(defprotocol HMac
  (make-hmac [data key algorithm]))
----

[NOTE]
Functions like *hmac-sha256* just alias the more generic functions
*hmac* and *shmac*.


Poly1305
^^^^^^^^

Poly1305 is a cryptographic message authentication code
(MAC) written by Daniel J. Bernstein. It can be used to verify the
data integrity and the authenticity of a message.

The security of Poly1305 is very close to the bock cipher algorithm.
As a result, the only way for an attacker to break Poly1305 is to break
the cipher.

Poly1305 offers cipher replaceability. If anything does
go wrong with one, it can be substituted with an other with identical
security guarantee.

Unlike *HMac*, it requires initialization vector (IV). Is like a
salt, but required for security guarantee, and it should be generated
using strong random number generator. Also, iv should be of same
length as choised cipher block size.

Basic usage
+++++++++++

The default specification talks about AES as default block cipher,
but buddy comes with support for three block ciphers: AES, Serpent
and Twofish.

.Make mac using Serpent block cipher with random IV
[source, clojure]
----
(require '[buddy.core.codecs :refe [bytes->hex]])
(require '[buddy.core.mac.poly1305 :as poly])
(require '[buddy.core.keys :refer [make-random-bytes]])

(let [iv  (make-random-bytes 16)
      mac (poly/poly1305 "some-data" "mysecret" iv :serpent)]
  (println (bytes->hex mac)))
;; => "1976b1c490c306e7304a59dfacee4207"
----


Public/Private keypairs
~~~~~~~~~~~~~~~~~~~~~~~

Before explaining digital signatures, you need read public/private keypairs
and conver them to usable objects. Buddy has limited support for read:

- RSA keypair
- ECDSA keypair


RSA Keypair
^^^^^^^^^^^

RSA keypair is used for obvious rsa encrypt/decrypt operations, but also
is used for make digital signature with any rsa derived algorithm.

.Read keys
[source,clojure]
----
(require '[buddy.core.keys :as keys])

;; The last parameter is optional and is only mandatory
;; if a private key is encrypted.
(def privkey (keys/private-key "test/_files/privkey.3des.rsa.pem" "secret")
(def pubkey (keys/public-key "test/_files/pubkey.3des.rsa.pem"))
----

.Generate a RSA Keypair using openssl.
[source,bash]
----
# Generate aes256 encrypted private key
openssl genrsa -aes256 -out privkey.pem 2048

# Generate public key from previously created private key.
openssl rsa -pubout -in privkey.pem -out pubkey.pem
----


ECDSA Keypair
^^^^^^^^^^^^^

Like RSA keypair, ECDSA also are used for make a digital signature and
can be readed like previous rsa examples.

.Read keys.
[source, clojure]
----
(require '[buddy.core.keys :as keys])

;; The last parameter is optional and is only mandatory
;; if a private key is encrypted.
(def privkey (keys/private-key "test/_files/privkey.ecdsa.pem" "secret")
(def pubkey (keys/public-key "test/_files/pubkey.ecdsa.pem"))
----

.Generate a ECDSA Keypair using openssl.
[source, bash]
----
# Generating params file
openssl ecparam -name prime256v1 -out ecparams.pem

# Generate a private key from params file
openssl ecparam -in ecparams.pem -genkey -noout -out ecprivkey.pem

# Generate a public key from private key
openssl ec -in ecprivkey.pem -pubout -out ecpubkey.pem
----


Digital Signatures
~~~~~~~~~~~~~~~~~~

Digital Signatures differs from Mac as Mac values are both generated and verified
using the same secret key. Digital Signatures requires public/private keypair, it
signs using private key and verifies signature using a public key.


RSASSA PSS
^^^^^^^^^^

RSASSA-PSS is an improved probabilistic signature scheme with
appendix. What that means is that you can use a private RSA key
to sign data in combination with some random input.

link:http://www.ietf.org/rfc/rfc3447.txt[rfc3447.txt]

.Sign sample string using rsassa-pss.
[source, clojure]
----
(require '[buddy.core.keys :as keys])
(require '[buddy.core.sign :as sign])

;; Read private key
(def rsaprivkey (keys/private-key "test/_files/privkey.3des.rsa.pem" "secret"))

;; Make signature
(def signature (sign/rsassa-pss-sha256 "foo" rsaprivkey))

;; Now signature contains a byte[] with signature of "foo" string
----

.Verify signature using rsassa-pss.
[source, clojure]
----
;; Read private key
(def rsapubkey (keys/private-key "test/_files/pubkey.3des.rsa.pem"))

;; Make verification
(sign/rsassa-pss-sha256-verify "foo" signature rsapubkey))
;; => true
----



RSASSA PKCS1 v1.5
^^^^^^^^^^^^^^^^^

RSASSA-PSS is an probabilistic signature scheme with appendix.
What that means is that you can use a private RSA key to sign data.

link:http://www.ietf.org/rfc/rfc3447.txt[rfc3447.txt]


.Sign sample string using rsassa-pkcs.
[source, clojure]
----
(require '[buddy.core.keys :as keys])
(require '[buddy.core.sign :as sign])

;; Read private key
(def rsaprivkey (keys/private-key "test/_files/privkey.3des.rsa.pem" "secret"))

;; Make signature
(def signature (sign/rsassa-pkcs-sha256 "foo" rsaprivkey))

;; Now signature contains a byte[] with signature of "foo" string
----

.Verify signature using rsassa-pkcs.
[source, clojure]
----
;; Read private key
(def rsapubkey (keys/private-key "test/_files/pubkey.3des.rsa.pem"))

;; Make verification
(sign/rsassa-pkcs-sha256-verify "foo" signature rsapubkey))
;; => true
----


Eliptic Curve DSA
^^^^^^^^^^^^^^^^^

Elliptic Curve Digital Signature Algorithm (ECDSA) is a variant of the
Digital Signature Algorithm (DSA) which uses elliptic curve cryptography.


Key Derivation Functions
~~~~~~~~~~~~~~~~~~~~~~~~

TODO


Ciphers
~~~~~~~

TODO


Codecs (binary -> string conversion)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Implements some useful and widely used around all buddy library functions
for make conversions between strings, bytes, hex encoded strings and base64
encoded strings.

No documentation found for this part, but you can view source code for it.


High Level Library
------------------

Message Signing
~~~~~~~~~~~~~~~

The "signing framework" of _buddy_ is mainly based on django's
link:https://docs.djangoproject.com/en/1.6/topics/signing/[Cryptographic
signing] library but extended with various signing algorithms and cryptography
support.

It can be used for several purposes:

- Safety send/store signed or encrypted messages.
- Safely storing session data in cookies instead of a database (It prevents others from changing session content)
- Self contained token generation for use it on completely stateless token based authentication.

NOTE: this library is used by one of authentication backends for implement token based stateless authentication.

.Supported Algorithms
[options="header"]
|=====================================================================================
|Algorithm name     | Hash algorithms   | Keywords           | Priv/Pub Key?
|Elliptic Curve DSA | sha256, sha512    | `:es256`, `:es512` | Yes
|RSASSA PSS         | sha256, sha512    | `:ps256`, `:ps512` | Yes
|RSASSA PKCS1 v1_5  | sha256, sha512    | `:rs256`, `:rs256` | Yes
|HMAC               | sha256*, sha512   | `:hs256`, `:hs256` | No
|=====================================================================================

+++*+++ indicates the default value.


[NOTE]
====
Only HMAC based algorithm supports plain text secret keys, If you want use
Digital Signature instead of hmac, you must have a key pair (public and private).
====


Using low level api
^^^^^^^^^^^^^^^^^^^

There are four signing functions in *`buddy.sign.generic`* namespace: `sign`,
`unsign`, `loads` and `dumps`.

`sign` and `unsign` are low level and work primarily with strings.

.Unsigning previously signed data
[source,clojure]
----
(require '[buddy.sign.generic :refer [sign unsign]])

;; Sign data
(def signed-data (sign "mystring" "my-secret-key"))

;; signed-data should contain a string similar to:
;; "mystring:f08dd937a438f43639d34a345910148cb933ea8ea0c2c306e8733e0255677e3d:MTM..."

;; Unsign previosly signed data
(def unsigned-data (unsign signed-data "my-secret-key"))

;; unsigned-data should contain the original string: "mystring"
----

The signing process consists of append signatures to the original
string, separating the signature with a predefined separator (default
":" char).

Each signature have attached a timestamp (with millisecond of accuracy) and you can
invalidate signed messages based on their age.

.Invalidate signed data using timestamp
[source,clojure]
----
;; Unsign with maxago (15min)
(def unsigned-data (unsign signed-data "my-secret-key" {:maxago (* 60 15 1000)}))

;; unsigned-data should contain a nil value if the signing date is
;; older than 15 min.
----


Protecting complex data structures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you wish to protect a native data structure (hash-map, hash-set,
list, vector, etc...)  you can do so using the signing `dumps` and
`loads` functions.

They accept the same parameters as their low level friends, but can also sign
more complex data.

.Sign/Unsign Clojure hash-map
[source,clojure]
----
(require '[buddy.sign.generic :refer [dumps loads]])

;; Sign data
(def signed-data (dumps {:userid 1} "my-secret-key"))

;; signed-data should contain a string similar to:
;; "TlBZARlgGwAAAAIOAAAABnVzZXJpZCsAAAAAAAAAAQ:59d9e8063ad80f6abd3092b45857810b10f5..."

;; Unsign previously signed data
(def unsigned-data (loads signed-data "my-secret-key"))

;; unsigned-data should contain a original map: {:userid 1}
----

NOTE: it uses a Clojure serialization library link:https://github.com/ptaoussanis/nippy[Nippy]


Using Digital Signature algorithms
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For use anyone of digital signature algorithms you must have a private/public key. If you
don't have one, don't worry, generate one it's very easy (using *openssl*).


Elliptic Curve DSA
++++++++++++++++++

[source, bash]
----
# Generating params file
openssl ecparam -name prime256v1 -out ecparams.pem

# Generate a private key from params file
openssl ecparam -in ecparams.pem -genkey -noout -out ecprivkey.pem

# Generate a public key from private key
openssl ec -in ecprivkey.pem -pubout -out ecpubkey.pem
----


RSA based signatures
++++++++++++++++++++

[source, bash]
----
# Generate aes256 encrypted private key
openssl genrsa -aes256 -out privkey.pem 2048

# Generate public key from previously created private key.
openssl rsa -pubout -in privkey.pem -out pubkey.pem
----


Using Digital Signature Keys for signing
++++++++++++++++++++++++++++++++++++++++

Now, having generated key pair, you can sign your messages with Digital
Signature algorithms also previously mentioned.

[source, clojure]
----
(require '[buddy.sign.generic :refer [sign unsign]])

;; Import namespace for managing/reading keys
(require '[buddy.core.keys :as keys])

;; Create keys instances
(def ec-privkey (keys/private-key "ecprivkey.pem"))
(def ec-pubkey (keys/public-key "ecpubkey.pem"))

;; Use them like plain secret password with hmac algorithms for sign
(def signed-data (sign "mystring" ec-privkey {:alg :ec256}))

;; And unsign
(def unsigned-data (unsign signed-data ec-pubkey {:alg :ec256}))
----


Password Hashers
~~~~~~~~~~~~~~~~

Another important part of a good authentication/authorization library
is providing some facilities for generating secure passwords.

_buddy_ comes with a few functions for generating and verifying passwords
with the widely used password derivation algorithms: bcrypt and pbkdf2.

.Supported password hashers algorithms
[options="header"]
|=====================================================================================
| Hash algorithm name  | Namespace              | Observations
| Bcrypt               | `byddy.hashers.bcrypt` | Recommended
| Pbkdf2               | `buddy.hashers.pbkdf2` | Recommended
| Scrypt               | `buddy.hashers.scrypt` | Recommended
| sha256               | `buddy.hashers.sha256` | Not recommended
| md5                  | `buddy.hashers.md5`    | Broken! Not Recommended
|=====================================================================================


The hashers  consist in two functions: `make-password` and `check-password`.

The purpose of these functions is obvious: creating a new password,
and verifying incoming plain text password with previously created
hash.

.Example of creating and verifying a new hash
[source,clojure]
----
(require '[buddy.hashers.bcrypt :as hs])

(def myhash (hs/make-password "secretpassword"))
(def ok (hs/check-password "secretpassword" myhash))

;; ok var reference should contain true
----

[NOTE]
====
`make-password` accept distinct parameters depending on hasher implementation and all functions
works with strings instead of bytes (unlike cryptographyc hash functions).
====


Web extensions
--------------

Additionaly, buddy commes with web libraries support for authentication and authorization. It
mainly works with ring/compojure combination but in future can be extended for work with other
libraries

Authentication
~~~~~~~~~~~~~~

_buddy_ comes with an authentication system. It is implemented with
protocols that can be used to implement your own authentication
backend if one of the now supported backends by buddy does not satisfy
your needs.

Here is a list of built-in authentication backends:

- Http Basic
- Session
- Token
- SignedToken (using previously explained signing framework).


HTTP Basic
^^^^^^^^^^

The HTTP Basic authentication backend is one of the simplest/insecure
authentication systems, but it works well as a first introduction of
authentication with _buddy_.

.Simple handler definition
[source,clojure]
----
(require '[buddy.auth :refer (authenticated?)])
(require '[ring.util.response :refer (response)])

;; Simple ring handler. This can also be a compojure routes handler
;; or anything else compatible with ring middlewares.
(defn handler
  [request]
  (if (authenticated? request)
    (response (format "Hello %s" (:identity request)))
    (response "Hello Anonymous")))
----

.Middleware usage example
[source,clojure]
----
;; Import middleware function and backend constructor

(require '[buddy.auth.backends.httpbasic :refer [http-basic-backend]])
(require '[buddy.auth.middleware :refer [wrap-authentication]])

;; This function always receives request and authdata, authdata
;; can vary with other backends. For http basic backend, authdata
;; parameter has the form {:username xxxx :password yyyy}
;;
;; This function should return a non-nil value that
;; is automatically stored on :identity key on request
;; If it returns nil, a request is considered unauthenticated.

(defn my-authfn
  [request, authdata]
  (let [username (:username authdata)
        password (:password authdata)]
    (search-user-on-db username password)))

;; Define the main handler with *app* name wrapping it
;; with authentication middleware using an instance of
;; just created http-basic backend.

(def app
  (let [backend (http-basic-backend :realm "MyApi" :authfn my-authfn)]
    (wrap-authentication handler backend)))
----


Session
^^^^^^^

The session-authenticated backend has the simplest implementation, but
requires session middleware to work properly.

Unlike the previous auth backend, this does not requires authfn,
because it relies on `:identity` key on session and trust it. If a
session contains the `:identity` key with logical true value it
identifies the current request as authenticated and put `:identity`
key on request map.

See xref:examples[examples section] for complete examples for this backend.


Token
^^^^^

It works as expected, parses token and call function for authenticate the token. Nothing
more.


Signed Token
^^^^^^^^^^^^

This works similar to *session* and *token* backends, but it uses a signing framework explained in a
first section of this document.

Extracts token from header using same functions as *token* backend but instad of call a function
for authorize or trust a session key, it try verify the incoming token and if it success, the signed
data are trustly set to `:identity` key on request.

See xref:examples[examples section] for complete examples for this backend.


Authorization
~~~~~~~~~~~~~

_buddy_ also comes with an authorization system.

The authorization system is splited in two parts:

- generic authorization system using exceptions for fast return and unauthorized-handler function
  for handle unauthorized requsts.
- access rules system based on matching urls using regular expressions and apply some
  rules handlers. The idea is taken from `lib-noir` but with slighty distinct approach.

Generic authorization
^^^^^^^^^^^^^^^^^^^^^

This authorization system encapsulates your handlers/controllers in one try/catch block
catching only notauthorized exceptions. So spliting unauthorized request handling code from
your handlers/controllers in a separate function. Moreover, permits fast return when
not authorized request is detected.

Like authentication system, authorization is also implemented using protocols. Taking advantage of
it, all builtin authentication backends also implements this authorization protocol (`IAuthorization`).

Some authentication backends require specific behavior in the
authorization layer (like http-basic which should return
`WWW-Authenticate` header when request is unauthorized) and by
default, all backends come with an implementation. You can overwrite
the default behavior by passing your own exception handler through the
`:unauthorized-handler` keyword parameter in the backend constructor.

Below is a complete example setting up a basic/generic authorization
system for your ring compatible web application:


.Defining unauthorized handler
[source,clojure]
----
(require '[buddy.auth :refer [authenticated? throw-unauthorized]])
(require '[ring.util.response :refer (response redirect)])

;; An unauthorized-handler is executed when `buddy.auth/throw-unauthorized`
;; exception is raised and captured by genric authorization middleware:
;; `wrap-authorization`. It always receives the current request and metadata
;; hash-map that in most cases is empty.

(defn my-unauthorized-handler
  [request metadata]
  (if (authenticated? request)
    (response "Permission denied")
    (redirect "/login")))
----


.Defining a simple handler that raises unauthorized exception when user is not authenticated
[source,clojure]
----
;; This is a simple ring compatible handler
(defn handler
  [request]
  (if (authenticated?)
    (response "Hello World")
    (throw-unauthorized)))
----


.Define the final handler
[source,clojure]
----
(require '[buddy.auth.backends.httpbasic :refer [http-basic-backend]])
(require '[buddy.auth.middleware :refer [wrap-authentication wrap-authorization]])

;; Define the final handler wrapping it on authentication and
;; authorization handler using the same backend and overwriting
;; the default unathorized request behavior with own, previously
;; defined function

(def app
  (let [backend (http-basic-backend
                 :realm "API"
                 :authfn my-auth-fn
                 :unauthorized-handler my-unauthorized-handler)]
    (-> handler
        (wrap-authentication backend)
        (wrap-authorization backend))))
----

NOTE: If you want know how it really works, see xref:how-it-works[How it works] section or
take a look on examples.


Access Rules System
^^^^^^^^^^^^^^^^^^^

Introduction
++++++++++++

The access rules are another part of the authorization system, and
consist of a list of rules for one or more uri's using regular
expressions. One rule consists of a regular expression with its
associated handler (function) for authorization logic.

.Simple rule example
[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler admin-access}
----

Having the `admin-access` function like this:

[source,clojure]
----
(def users {:niwibe {:roles #{:admin}}
            :pepe {:roles #{:user}}})

(defn admin-access
  [request]
  (let [identity (:identity request)]
    (if (nil? identity) false
      (let [roles (-> identity users :roles)]
        (boolean (roles :admin))))))
----

The handler function should receive a request and return true, false
or throw unauthorized exception. Throwing unauthorized exception is a
fast return method and no other handler is executed before it (only if
handler is wrapped with `wrap-authorization` middleware).

In the previous example we have seen a simple handler associated with
one regular expression, but _buddy_ access rules system allows combine
more handlers using logical `:and` & `:or` combinators with nesting
support.

For example, suppose you want to allow access to a set of urls only to
operators or administrators:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler {:or [admin-access operator-access]}}
----

Or allow only when a user has both roles, operator and administrator:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler {:and [admin-access operator-access]}}
----

Even more, you want to only allow read-write access to administrators
and operators, and read-only access to any authenticated user:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler {:or [admin-access operator-access
               {:and [safemethod-access authenticated-access]}]}}
----


Usage
+++++

The access rules system is flexible and adapting it is very simple for
many use cases.

The simplest way to use access rules is by using the
`wrap-access-rules` middleware with an ordered vector of
rules. *Important:* rules are evaluated in order, therefore, put less
restrictive regular expression at the end.

.Define a list of rules
[source,clojure]
----
;; Rules handlers used on this example are omited for code clarity
;; and them repsents a authorization logic for its name.

(def rules [{:pattern #"^/admin/.*"
             :handler {:or [admin-access operator-access]}}
            {:pattern #"^/login$"
             :handler any-access}
            {:pattern #"^/.*"
             :handler authenticated-access}])
----

.Define default behavior for not authorized requests
[source,clojure]
----
;; This functions works like default ring compatible handler
;; and should implement the default behavior for request
;; that are not authorized by any defined rule

(defn reject-handler
  [request]
  {:status 403
   :headers {}
   :body "Not authorized"})
----

.Wrap your handler with access rules (and run with jetty as example)
[source,clojure]
----
(defn -main
  [& args]
  (let [app (wrap-access-rules your-app-handler
                               :rules rules
                               :reject-handler reject-handler))]
    (run-jetty app {:port 9090}))
----

An unauthorized exception is raised if no reject handler is
specified. These exceptions can be captured by generic authorization
middleware.

[NOTE]
The current request uri not match any regular expresion, the default policy enter in
action. The default policy in _buddy_ is `:allow` but you can change it to `:reject`
using keyword `:policy` on wrap-access-rules middleware.

An other way to use access rules is using `buddy.auth.accessrules/restrict`
handler decorator that allows assign some rules to concrete handlers omiting
any url matching.

The usage of it can be easy, as shown with Compojure routes:

[source,clojure]
----
(require '[buddy.auth.accessrules :refer [restrict]])

(defroutes app
  (GET "/" [] (restrict my-home-ctrl
                        ;; Mandatory parameter
                        :rule user-access
                        ;; Optional parameter, in case if not passed
                        ;; default is used (defined by `wrap-access-rules`
                        ;; middleware) or `throw-unauthorized` is raised
                        ;; if default isn't available
                        :reject-handler reject-handler))
  (GET "/admin" (restrict my-admin-ctrl
                          :rule admin-access)))
----


Advanced Usage
--------------

[[how-it-works]]
How Auth Works
~~~~~~~~~~~~~~

Each backend implements two protocols: `IAuthentication` and `IAuthorization`.

*IAuthentication* provides two functions: `parse` and `authenticate`
and is automatically handled with `wrap-authentication` ring
middleware. This is an example flow for the http basic backend:

1. Received request is passed to `parse` function. This function extracts the +Authorization+
   header, decodes a base64 encoded string and returns Clojure map with `:username` and `:password`
   keys. If a parse error occured, it returns nil.
2. If the previous step parsed the token successfully, `authenticate` is called with current
   request and parsed data from previous step. `authenticate` can delegate authentication
   to user defined function passed as `:authfn` parameter to backend constructor.
   `authenticate` should return a request with `:identity` key assigned to nil or any other
   value. All requests with `:identity` key with nil value are considered not authenticated.
3. User handler is called.


[NOTE]
=========================
- `parse` function can return valid response, in that case response is returned inmediatel
  ignoring user handler.
- if `parse` function returns nil, `authenticate` function is ignored and user handler is
  called directly.
- `authenticate` also can return a valid response, in these case it has same behavior that
  with `parse` function.
=========================

*IAuthorization* provides `handle-unauthorized` function. Each backend implements it default
behavior but it can be overwritted with user defined function, passed on `:handle-unauthorized`
keyword parameter to backend constructor. It always should return a valid response.

Authorization is handled automatically with `wrap-authorization` ring middleware. It wraps
all request in try/catch block for intercept only authorization exception.

This is a flow that follows authorization middleware:

1. User handler is wrapped in try/catch block and executed.
2. Not authorized exception is raised with `buddy.auth/throw-unauthorized` function from
   any part of your handler.
3. handle-unauthorized is executed of your backend, if user has specified it own function,
   the user defined function is executed else, default behavior is executed.


Examples
--------

_buddy_ comes with some examples for helping a new user understand how
it works. All examples are available in the `examples/` directory.

At the moment, two examples are available:

- link:https://github.com/niwibe/buddy/tree/master/examples/sessionexample[Use session backend as authentication and authorization.]
- link:https://github.com/niwibe/buddy/tree/master/examples/oauthexample[Use session backend with oauth2 using Github api.]


To run examples, you should be in the project's root directory.
Execute `lein with-profile examplename run` where examplename can be
`sessionexample` or `oauthexample`.


How to contribute
-----------------

_buddy_ does not have many restrictions for contributing.

*For Bugfix*:

- Fork github repo.
- Fix a bug/typo on new branch.
- Make a pull-request to master.

*For New feature*:

- Open a new issue with new feature purpose.
- If it is accepted, follow same steps as "bugfix".


FAQ
---

*Buddy is a security library/framework?*
Yes and No. I don't like call "security" library because security represents a very generic
concepts and can contain a lot of things. Buddy is target to authentication, authorization and signing.

*How can I use _buddy_ with link:http://clojure-liberator.github.io/liberator/[liberator]?*

By design, _buddy_ has authorization and authentication well
separated. This helps a lot if you want use only one part of it (ex:
authentication only) without including the other.

The best combination is to use _buddy_'s authentication middleware
with liberator authorization endpoints.

*Buddy will support pgp?*

Surely not! Because there is already exists one good link:https://github.com/greglook/clj-pgp[library for that].

License
-------

[source,text]
----
Copyright 2014 Andrey Antukh <niwi@niwi.be>

Licensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----
