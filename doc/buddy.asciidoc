buddy documentation
===================
Andrey Antukh, <niwi@niwi.be>
0.1.0, 2014-01-19

:toc:
:numbered:


Introduction
------------

_buddy_ is a simple authentication, authorization and signing library for clojure.
It's designed with simplicity in mind and high level framework agnostic
(it only depends on ring) following the principle of single responsability.

Features/Libraries:

- Modular Authentication(implemented using protocols).
- Modular Generic Authorization.
- Simple regular expression based access rules system.
- Signing library.
- Password hashers library.

link:api/index.html[Api reference documentation.]


Philosofy
~~~~~~~~~

Five most important rules:

- Beautiful is better than ugly.
- Explicit is better than implicit.
- Simple is better than complex.
- Complex is better than complicated.
- Readability counts.

All contributions to _buddy_ should keep these important rules in mind.

Project Maturity
----------------

_buddy_ is a young project and can experiment some api changes.

Install
-------

This section covers a installation of _buddy_.

Leiningen
~~~~~~~~~

The simplest way to use _buddy_ on clojure project, is including it on dependency
vector of your *_project.clj_* file:

._on project.clj_
[source,clojure]
----
[buddy "0.1.0-beta1"]
----

Maven
~~~~~

Also, you can use it on your java projects with maven. As first step add a clojars repository:

[source,xml]
----
<repository>
    <id>clojars.org</id>
    <url>http://clojars.org/repo</url>
</repository>
----

Following of jnanomsg package dependecy:

[source,xml]
----
<dependency>
    <groupId>buddy</groupId>
    <artifactId>buddy</artifactId>
    <version>0.1.0-beta1</version>
</dependency>
----

User guide
----------

Signing
~~~~~~~

One of the main parts of _buddy_ is a "Signing framework",
that is mainly based on django's link:https://docs.djangoproject.com/en/1.6/topics/signing/[Cryptographic signing]
library.

That can be used for several purposes:

- Safely store session data on cookie instead on a database. (It prevents that other can change a session content)
- Self contained token generation for use it on completelly stateless token based authentication.

NOTE: this library is used by one of authentication backends for implement token based stateless authentication.

NOTE: hmac+sha256 is used for sign all data.

Using low level api
^^^^^^^^^^^^^^^^^^^

_buddy's_ signing functions live in *`buddy.crypto.signing`* namespace and it consists on four
functions: `sing`, `unsign`, `loads` and `dumps`.

`sign` and `unsign` functions represents a low level api and them works with
strings as primary data.

.Unsigning previously signed data
[source,clojure]
----
(require '[buddy.crypto.signing :refer [sign unsign]])

;; Sign data
(def signed-data (sign "mystring" "my-secret-key"))

;; signed-data should contain string similtar to:
;; "mystring:f08dd937a438f43639d34a345910148cb933ea8ea0c2c306e8733e0255677e3d:MTM..."

;; Unsign previosly signed data
(def unsigned-data (unsign signed-data "my-secret-key"))

;; unsigned-data should contain a original string: "mystring"
----

Signing process consists on concat signature on the end of the original string,
separating the signature with predefined separator (default ":" char). Signature 
consists on timestamped hmac signature. *Timestamp* can be used for invalidate by 
time some signed data.

.Invalidate signed data using timestamp
[source,clojure]
----
;; Unsign with maxago (15min)
(def unsigned-data (unsign signed-data "my-secret-key" {:maxago (* 60 15 1000)}))

;; unsigned-data should contain nil value if a signed date is older than 15 min.
----

Protecting complex data structures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you wish to protect a clojure native data structure (hash-map, hash-set, list, vector, etc...)
you can do so using the signing *`dumps`* and *`loads`* functions. Them accepts same parameters that
their friends (`sign` and `unsign`) but also can sign more complex data.

.Sign/Unsign clojure hash-map
[source,clojure]
----
(require '[buddy.crypto.signing :refer [dumps loads]])

;; Sign data
(def signed-data (dumps {:userid 1} "my-secret-key"))

;; signed-data should contain string similar to:
;; "TlBZARlgGwAAAAIOAAAABnVzZXJpZCsAAAAAAAAAAQ:59d9e8063ad80f6abd3092b45857810b10f5..."

;; Unsign previosly signed data
(def unsigned-data (loads signed-data "my-secret-key"))

;; unsigned-data should contain a original map: {:userid 1}
----

NOTE: it uses a clojure serialization library link:https://github.com/ptaoussanis/nippy[Nippy]

Hashers
~~~~~~~

An other main part of good authentication/authorization library is give you some facilities
for generate secure passwords. _buddy_ comes with some abstractions that allows use various
pasword algorithms and extend it implementing using an other algorithm.

_buddy_ hashers lives on *`buddy.crypto.hashers` namespace and consists on three functions:
`make-hasher`, `verify` and `make-hash`. The first function works as hasher constructor, and
should receive a keyword that represents a hasher:

.Example creating pbkdf2 hasher instance
[source,clojure]
----
(require '[buddy.crypto.hashers :as hs])

(def h (hs/make-hasher :pbkdf2))
----

The rest of functions has obviously purpose, create new password hash and verify a password:

.Example create new hash and verify it
[source,clojure]
----

(def myhash (hs/make-hash h "insecurepassword"))
(def ok (hs/verify h "insecurepassword" myhash))

;; ok var reference should contain true
----

NOTE: `make-hash` and `verify` also accept salt for using salted hashes.

In previous example we use *pbkdf2* hasher but _budd_ also support many other
hasher algorithm by default. This is a complete list of implemented hashers:

- `:pbkdf2` (alias for `:pbkdf2-sha1`)
- `:bcrypt`
- `:sha256`
- `:md5`


NOTE: in near future scrypt should to be implemented as an other hash backend.


Authentication
~~~~~~~~~~~~~~

_buddy_ comes with authentication system. It is implemented with protocols, that can be used for
implement own authentication backend if one of the now supported backends by buddy does not satisfy
your needs.

There a list of builtin authentication backends:

- Http Basic
- Session
- Stateless Token (using previousle explained signing framework).

Http Basic
^^^^^^^^^^

Http Basic authentication backend is one of the simplest/unsecure authentication system, but works
well as first introduction of how authentication works with _buddy_.

The main goal of _buddy_ is not depending on any high level framework like (compojure, caribou, pedestal)
and it works directly as ring middleware.

.Example app: _main.clj_
[source,clojure]
----
(ns yourapp.main
  (:require [ring.adapter.jetty :as jetty]
            [ring.util.response :refer [response]]
            [buddy.auth.backends.httpbasic :refer [http-basic-backend]]
            [buddy.auth.middleware :refer [wrap-authentication]]
            [bussy.auth :refer [authenticated?]])
  (:gen-class))

;; Simple ring handler. This also, can be a compojure routes handler
;; or any other while it be compatible with ring middlewares.

(defn handler
  [request]
  (if (authenticated? request)
    (response (format "Hello %s" (:identity request)))
    (response "Hello Anonymous")))

;; This function always receives request and authdata, authdata
;; can vary with other backends. For http basic backend, authdata
;; parameter has this form: {:username xxxx :password yyyy}
;;
;; This function should return some not nil value that
;; are automatically stored on :identity key on request
;; If it return nil, a request is considered unautenticated.

(defn my-authfn
  [request, authdata]
  (let [username (:username authdata)
        password (:password authdata)]
    (cond
      (and (= username "foo")
           (= password "bae")) :myuser)))

(defn -main
  [& args]
  (let [auth-backend (http-basic-backend :realm "MyApi" :authfn my-authfn)
        app          (-> handler
                         (wrap-authentication backend))]
    (jetty/run-jetty app {:port 9090}))
----


Session
^^^^^^^

Session authentication backend, is the simplest backend of all implemented backends
on _buddy_ but it requires of other additional middlewares from ring: cookies and/or session.

Unlike the previous auth backend, this does not requires authfn, because it relies on 
`:identity` key on session  and trust it. If a session contains the `:identity` key with
logical true value it identifies the current request as authenticated and put `:identity`
key on request map.

See xref:examples[examples section] for complete examples for this backend.

Stateless Token
^^^^^^^^^^^^^^^

This works similar to *session* backend, but it uses a signing framework explained in a
first section of this document.

Instead of trust a session key,it extracts a token from `Authorization` header like oauth, and
unsigns it (extracted token) using the signing framework. 

If a signature is valid, the contents of unsigned data trustly set to `:identity` key on request.

See xref:examples[examples section] for complete examples for this backend.

Authorization
~~~~~~~~~~~~~

_buddy_ also comes with authorization system.

The authorization system is splited in two parts:

- generic authorization system using exceptions for fast return and unauthorized-handler function
  for handle unauthorized requsts.
- access rules system based on matching urls using regular expressions and apply some
  rules handlers. The idea is taken from `lib-noir` but with slighty distinct approach.

Generic authorization
^^^^^^^^^^^^^^^^^^^^^

Authentication and authorization systems on _buddy_ are implemented using protocols for allow
easy way to extend or implement own method.

Previously explained authentication backends, implements authorization protocol, allowing
use one backend for both purposes: authentication or/and authorization.

Any authorization backend should implement a deterministic flow for handle not authorized
exceptions. By default, each builtin backend has its own default flow for handle not authorized
requests. Additionaly them exposes a simple way to overwrite the default behavior passing
a custom exception handler to `:unauthorized-handler` parameter in the backend constructor.

As example, the default behavior of http basic auth backend, is:

- If a user is authenticated, and *notauthorized* exception is raised, 403 response is returned automaticaly.
- If a user is anonymosus, 401 response with `WWW-Authenticate` is returned.

Similar behavior are implemented in other backends.

.Incomplete example of how overwrite unauthorized handler behavior.
[source,clojure]
----
(ns myns.somensfile
  (:require [clojure.java.io :as io]
            [ring.util.response :refer [response redirect]]
            [buddy.auth :refer [authenticated? throw-notauthorized]]
            [buddy.auth.backends.httpbasic :refer [http-basic-backend]]
            [buddy.auth.middleware :refer [wrap-authentication wrap-authorization]]))

;; This function always receives a request and exception metadata.

(defn my-unauthorized-handler
  [request metadata]
  (if (authenticated? request)
    (response (io/resource "error.html"))
    (redirect "/login")))

(defn handler
  [request]
  (if (authenticated?)
    (response "Hello World")
    (throw-notauthorized)))

(defn -main
  [& args]
  (let [backend (http-basic-backend :realm "Api"
                                    :authfn (fn [_ _] :foo-user)
                                    :unauthorized-handler my-unauthorized-handler)
        handler (-> handler
                    (wrap-authentication backend)
                    (wrap-authorization backend))]
    (jetty/run-jetty handler {:port 9090})))
----

NOTE: for you want know how it really works, see xref:how-it-works[How it works] section.


Access Rules System
^^^^^^^^^^^^^^^^^^^

Introduction
++++++++++++

Access rules is an other part of authorization system, and it consists on seting a list
of rules for a one or set uri's using regular expressions. One rule consists in one regular
expression with associated handler (function) with authorization logic.

Example:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler admin-access}
----

Having the `admin-access` function like this:

[source,clojure]
----
(def users {:niwibe {:roles #{:admin}}
            :pepe {:roles #{:user}}})

(defn admin-access
  [request]
  (let [identity (:identity)]
    (if (nil? identity) false
      (let [roles (-> identity users :roles)]
        (boolean (roles :admin))))))
----

The handler function should receive a request and return: true, false or throw unauthorized
exception. Throwing unauthorized exception is a fast return method and no other handler
is excetured before it.

In previous example we have seen a simple handler associated with one regular expression, but
_buddy_ access rules system allows combine more handlers using logical `:and` & `:or` combinators
with nesting support.

Imagine the scenario when you want allow access to a set of urls to operators or administrators:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler {:or [admin-access operator-access]}}
----

Or, allow only when a user has both roles, operator and administrator:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler {:and [admin-access operator-access]}}
----

Even more, you want allow readwrite access to administrators and operators, and
readonly access to any authenticated user:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler {:or [admin-access operator-access
               {:and [safemethod-access authenticated-access]}]}}
----


How to use it?
++++++++++++++

Access rules system is still flexible for adapt it for a lot of case uses is very
simple.

The simplest way to use access rules, is using `wrap-access-rules` middleware
passing to it a ordered vector of rules. Important: rules are evaluated in order,
therefore, put less restrictive regular expression on the end.

._myapp.clj_
[source,clojure]
----
(ns myapp
  (:require [myapp.routes :refer [app]]
            [myapp.permissions :refer [admin-access operator-access
                                       any-access authenticated-access]]
            [buddy.auth.middleware :refer [wrap-access-rules]]))

(def rules [{:pattern #"^/admin/.*"
             :handler {:or [admin-access operator-access]}}
            {:pattern #"^/login$"
             :handler any-access}
            {:pattern #"^/.*"
             :handler authenticated-access}])

;; Function that used for handle unauthorized requests
(defn reject-handler
  [request]
  {:status 403
   :headers {}
   :body "Not authorized"})

(defn -main
  [& args]
  (let [handler (wrap-access-rules app rules {:reject-handler reject-handler}))]
    (jetty/run-jetty handler {:port 9090}))
----

If no reject handler is specified, unauthorized exception is raised. These exception
can be captured by generic authorization middleware.

[NOTE]
The current request uri not match any regular expresion, the default policy enter in
action. The default policy in _buddy_ is `:allow` but you can change it to `:reject`
using keyword `:policy` on wrap-access-rules middleware.


Advanced Usage
--------------

[[how-it-works]]
How It Works
~~~~~~~~~~~~

Each backend implements two protocols: `IAuthentication` and `IAuthorization`.

*IAuthentication* provides two functions: `parse` and `authenticate` and is automaticaly
handled with `wrap-authentication` ring middleware. This is a example flow of http basic
backend:

1. Received request, is passed to `parse` function. This function, extracts +Authorization+
   header, decode a base64 encoded string and return clojure map with `:username` and `:password`
   keys. If parse error is ocurred, it returns nil.
2. If previous step parses token successfully, `authenticate` function is called with current
   request and parsed data from previous step. `authenticate` can delegate authentication
   to user defined function passed as `:authfn` parameter to backend constructor.
   `authenticate` should return a request with `:identity` key assigned to nil or any other
   value. All requests with `:identity` key with nil value are considered not authenticated.
3. User handler is called.

[NOTE]
=========================
- `parse` function can return valid response, in that case response is returned inmediatel
  ignoring user handler.
- if `parse` function returns nil, `authenticate` function is ignored and user handler is
  called directly.
- `authenticate` also can return a valid response, in these case it has same behavior that
  with `parse` function.
=========================

*IAuthorization* provides `handle-unauthorized` function. Each backend implements it default
behavior but it can be overwritted with user defined function, passed on `:handle-unauthorized`
keyword parameter to backend constructor. It always should return a valid response.

Authorization is handled automatically with `wrap-authorization` ring middleware. It wraps
all request in try/catch block for intercept only authorization exception.

This is a flow that follows authorization middleware:

1. User handler is wrapped in try/catch block and executed.
2. Not authorized exception is raised with `buddy.auth/throw-notauthorized` function from
   any part of your handler.
3. handle-unauthorized is executed of your backend, if user has specified it own function,
   the user defined function is executed else, default behavior is executed.

Examples
--------

_buddy_ comes with some examples for facilitate a new user understand how it works. All
examples are available on `examples/` directory on root project.

At this momment one example is available:

- link:https://github.com/niwibe/buddy/tree/master/examples/sessionexample[Use session backend as authentication and authorization.]


How to contribute
-----------------

_buddy_ unlike clojure and other clojure contrib libs, does not have much restrictions for contribute. Just
follow the following steps depending on the situation:

*Bugfix*:

- Fork github repo.
- Fix a bug/typo on new branch.
- Make a pull-request to master.

*New feature*:

- Open new issue with new feature purpose.
- If it is accepted, follow same steps as "bugfix".

FAQ
---

*How can use _buddy_ with link:http://clojure-liberator.github.io/liberator/[liberator]?*

_buddy_ by design, has authorization and authentication concepts well separated. This
helps a lot if you want use some one part of it (ex: authentencation only) without including
other parts.

This makes, integration with liberator very simple, because liberator comes with good
decision handlers for authorization and by normally usage, you should use it instead
of integrate other third party authorization system to liberator.

The best combination is use _buddy_ authentication middleware with liberator (using it
authorization system).


License
-------

----
Copyright 2013 Andrey Antukh <niwi@niwi.be>

Licensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----
