buddy documentation
===================
Andrey Antukh, <niwi@niwi.be>
0.1.0, 2014-01-19

:toc:
:numbered:


Introduction
------------

_buddy_ is an authentication, authorization and signing library for
Clojure.  It's designed with simplicity in mind and only depends on
ring.


Features/Libraries:

- Modular Authentication (implemented using protocols)
- Modular Generic Authorization
- Regular expression based access rules system
- Signing library
- Password hashing library

link:api/index.html[API reference documentation.]


Philosophy
~~~~~~~~~

Five most important rules:

- Beautiful is better than ugly
- Explicit is better than implicit
- Simple is better than complex
- Readability counts

Project Maturity
----------------

Since _buddy_ is a young project there can be some API breakage.


Install
-------

This section covers installing _buddy_.


Leiningen
~~~~~~~~~

The simplest way to use _buddy_ in a Clojure project is by including
it as a dependency in your *_project.clj_*:

._in project.clj_
[source,clojure]
----
[buddy "0.1.0-beta4"]
----


Maven
~~~~~

Also, you can use it with maven. First, add the clojars repository:

[source,xml]
----
<repository>
    <id>clojars.org</id>
    <url>http://clojars.org/repo</url>
</repository>
----

Then for buddy: 

[source,xml]
----
<dependency>
    <groupId>buddy</groupId>
    <artifactId>buddy</artifactId>
    <version>0.1.0-beta4</version>
</dependency>
----


User guide
----------

Signing
~~~~~~~

The "signing framework" of _buddy_ is mainly based on django's
link:https://docs.djangoproject.com/en/1.6/topics/signing/[Cryptographic
signing] library.

It can be used for several purposes:

- Safely storing session data in cookies instead of a database (It prevents others from changing session content)
- Self contained token generation for use it on completely stateless token based authentication.

NOTE: this library is used by one of authentication backends for implement token based stateless authentication.

NOTE: hmac+sha256 is used for sign all data.


Using low level api
^^^^^^^^^^^^^^^^^^^

There are four signing functions in *`buddy.crypto.signing`*: `sign`,
`unsign`, `loads` and `dumps`.

`sign` and `unsign` are low level and work primarily with strings.

.Unsigning previously signed data
[source,clojure]
----
(require '[buddy.sign.generic :refer [sign unsign]])

;; Sign data
(def signed-data (sign "mystring" "my-secret-key"))

;; signed-data should contain a string similar to:
;; "mystring:f08dd937a438f43639d34a345910148cb933ea8ea0c2c306e8733e0255677e3d:MTM..."

;; Unsign previosly signed data
(def unsigned-data (unsign signed-data "my-secret-key"))

;; unsigned-data should contain the original string: "mystring"
----

The signing process consists of append signatures to the original
string, separating the signature with a predefined separator (default
":" char). The signature is timestamped hmac. *Timestamp* can be used
to invalidate some signed data by time.

.Invalidate signed data using timestamp
[source,clojure]
----
;; Unsign with maxago (15min)
(def unsigned-data (unsign signed-data "my-secret-key" {:maxago (* 60 15 1000)}))

;; unsigned-data should contain a nil value if the signing date is
;; older than 15 min.
----

Protecting complex data structures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you wish to protect a native data structure (hash-map, hash-set,
list, vector, etc...)  you can do so using the signing *`dumps`* and
*`loads`* functions. They accept the same parameters as their friends
(`sign` and `unsign`), but can also sign more complex data.

.Sign/Unsign Clojure hash-map
[source,clojure]
----
(require '[buddy.sign.generic :refer [dumps loads]])

;; Sign data
(def signed-data (dumps {:userid 1} "my-secret-key"))

;; signed-data should contain a string similar to:
;; "TlBZARlgGwAAAAIOAAAABnVzZXJpZCsAAAAAAAAAAQ:59d9e8063ad80f6abd3092b45857810b10f5..."

;; Unsign previously signed data
(def unsigned-data (loads signed-data "my-secret-key"))

;; unsigned-data should contain a original map: {:userid 1}
----

NOTE: it uses a Clojure serialization library link:https://github.com/ptaoussanis/nippy[Nippy]

INFO: Currently only a generic sign method is available, but I am
working on a jwt (json web token) implementation for buddy. It will be
available in future releases.

Hashers
~~~~~~~

Another important part of a good authentication/authorization library
is providing some facilities for generating secure passwords. _buddy_
comes with a few functions for generating and verifying passwords like
the widely used password derivation algorithms bcrypt and pbkdf2 (with
sha256).

_buddy_ hashers live in `buddy.hashers.*` and usually consist
of `make-password` and `check-password`.

The purpose of these functions is obvious: creating a new password,
and verifying incoming plain text password with previously created
hash.

.Example of creating and verifying a new hash
[source,clojure]
----
(require '[buddy.hashers.bcrypt :as hs])

(def myhash (hs/make-password "secretpassword"))
(def ok (hs/check-password "secretpassword" myhash))

;; ok var reference should contain true
----

[NOTE]
`make-password` accept distinct parameters depending on hasher implementation.

In previous example we use *bcrypt* hasher but _buddy_ also support many other
hasher algorithm by default.

This is a complete list of implemented hashers:

- `buddy.hashers.pbkdf2` (implements pbkdf2 with sha256)
- `byddy.hashers.bcrypt`
- `buddy.hashers.sha256`
- `buddy.hashers.md5`
- `buddy.hashers.scrypt`


Authentication
~~~~~~~~~~~~~~

_buddy_ comes with an authentication system. It is implemented with
protocols that can be used to implement your own authentication
backend if one of the now supported backends by buddy does not satisfy
your needs.

Here is a list of built-in authentication backends:

- Http Basic
- Session
- Token
- SignedToken (using previously explained signing framework).


HTTP Basic
^^^^^^^^^^

The HTTP Basic authentication backend is one of the simplest/insecure
authentication systems, but it works well as a first introduction of
authentication with _buddy_.

.Simple handler definition
[source,clojure]
----
(require '[buddy.auth :refer (authenticated?)])
(require '[ring.util.response :refer (response)])

;; Simple ring handler. This can also be a compojure routes handler
;; or anything else compatible with ring middlewares.
(defn handler
  [request]
  (if (authenticated? request)
    (response (format "Hello %s" (:identity request)))
    (response "Hello Anonymous")))
----

.Middleware usage example
[source,clojure]
----
;; Import middleware function and backend constructor

(require '[buddy.auth.backends.httpbasic :refer [http-basic-backend]])
(require '[buddy.auth.middleware :refer [wrap-authentication]])

;; This function always receives request and authdata, authdata
;; can vary with other backends. For http basic backend, authdata
;; parameter has the form {:username xxxx :password yyyy}
;;
;; This function should return a non-nil value that
;; is automatically stored on :identity key on request
;; If it returns nil, a request is considered unauthenticated.

(defn my-authfn
  [request, authdata]
  (let [username (:username authdata)
        password (:password authdata)]
    (search-user-on-db username password)))

;; Define the main handler with *app* name wrapping it
;; with authentication middleware using an instance of
;; just created http-basic backend.

(def app (let [backend (http-basic-backend :realm "MyApi" :authfn my-authfn)]
           (wrap-authentication handler backend)))
----


Session
^^^^^^^

A session-authenticated backend has the simplest implementation
comparing it with others, but it requires session middleware to
properly work.

Unlike the previous auth backend, this does not requires authfn,
because it relies on `:identity` key on session and trust it. If a
session contains the `:identity` key with logical true value it
identifies the current request as authenticated and put `:identity`
key on request map.

See xref:examples[examples section] for complete examples for this backend.


Token
^^^^^

It works as expected, parses token and call function for authenticate the token. Nothing
more.

Signed Token
^^^^^^^^^^^^

This works similar to *session* and *token* backends, but it uses a signing framework explained in a
first section of this document.

Extracts token from header using same functions as *token* backend but instad of call a function
for authorize or trust a session key, it try verify the incoming token and if it success, the signed
data are trustly set to `:identity` key on request.

See xref:examples[examples section] for complete examples for this backend.


Authorization
~~~~~~~~~~~~~

_buddy_ also comes with authorization system.

The authorization system is splited in two parts:

- generic authorization system using exceptions for fast return and unauthorized-handler function
  for handle unauthorized requsts.
- access rules system based on matching urls using regular expressions and apply some
  rules handlers. The idea is taken from `lib-noir` but with slighty distinct approach.


Generic authorization
^^^^^^^^^^^^^^^^^^^^^

This authorization system encapsulates your handlers/controllers in one try/catch block
catching only notauthorized exceptions. So spliting unauthorized request handling code from
your handlers/controllers in a separate function. Moreover, permits fast return when
not authorized request is detected.

Like authentication system, authorization is also implemented using protocols. Taking advantage of
it, all builtin authentication backends also implements this authorization protocol (`IAuthorization`).

Some authentication backends require specific behavior in the
authorization layer (like http-basic which should return
`WWW-Authenticate` header when request is unauthorized) and by
default, all backends come with an implementation. You can overwrite
the default behavior by passing your own exception handler through the
`:unauthorized-handler` keyword parameter in the backend constructor.

Below is a complete example setting up a basic/generic authorization
system for your ring compatible web application:


.Defining uathorized handler
[source,clojure]
----
(require '[buddy.auth :refer [authenticated? throw-unauthorized]])
(require '[ring.util.response :refer (response redirect)])

;; An unauthorized-handler is executed when `buddy.auth/throw-unauthorized`
;; exception is raised and captured by genric authorization middleware:
;; `wrap-authorization`. It always receives the current request and metadata
;; hash-map that in most cases is empty.

(defn my-unauthorized-handler
  [request metadata]
  (if (authenticated? request)
    (response "Permission denied")
    (redirect "/login")))
----


.Defining a simple handler that raises unauthorized exception when user is not authenticated
[source,clojure]
----
;; This is a simple ring compatible handler
(defn handler
  [request]
  (if (authenticated?)
    (response "Hello World")
    (throw-unauthorized)))
----


.Define the final handler
[source,clojure]
----
(require '[buddy.auth.backends.httpbasic :refer [http-basic-backend]])
(require '[buddy.auth.middleware :refer [wrap-authentication wrap-authorization]])

;; Define the final handler wrapping it on authentication and
;; authorization handler using the same backend and overwriting
;; the default unathorized request behavior with own, previously
;; defined function

(def app (let [backend (http-basic-backend
                         :realm "API"
                         :authfn my-auth-fn
                         :unauthorized-handler my-unauthorized-handler)]
           (-> handler
               (wrap-authentication backend)
               (wrap-authorization backend))))
----

NOTE: If you want know how it really works, see xref:how-it-works[How it works] section or
take a look on examples.


Access Rules System
^^^^^^^^^^^^^^^^^^^

Introduction
++++++++++++

The access rules are another part of the authorization system, and
consist of a list of rules for one or more uri's using regular
expressions. One rule consists of a regular expression with its
associated handler (function) for authorization logic.

.Simple rule example
[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler admin-access}
----

Having the `admin-access` function like this:

[source,clojure]
----
(def users {:niwibe {:roles #{:admin}}
            :pepe {:roles #{:user}}})

(defn admin-access
  [request]
  (let [identity (:identity request)]
    (if (nil? identity) false
      (let [roles (-> identity users :roles)]
        (boolean (roles :admin))))))
----

The handler function should receive a request and return true, false
or throw unauthorized exception. Throwing unauthorized exception is a
fast return method and no other handler is executed before it (only if
handler is wrapped with `wrap-authorization` middleware).

In the previous example we have seen a simple handler associated with
one regular expression, but _buddy_ access rules system allows combine
more handlers using logical `:and` & `:or` combinators with nesting
support.

For example, suppose you want to allow access to a set of urls only to
operators or administrators:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler {:or [admin-access operator-access]}}
----

Or allow only when a user has both roles, operator and administrator:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler {:and [admin-access operator-access]}}
----

Even more, you want to only allow read-write access to administrators
and operators, and read-only access to any authenticated user:

[source,clojure]
----
{:pattern #"^/admin/.*"
 :handler {:or [admin-access operator-access
               {:and [safemethod-access authenticated-access]}]}}
----


Usage
++++++++++++++

The access rules system is flexible and adapting it is very simple for
many use cases.

The simplest way to use access rules is by using the
`wrap-access-rules` middleware with an ordered vector of
rules. *Important:* rules are evaluated in order, therefore, put less
restrictive regular expression at the end.

.Define a list of rules
[source,clojure]
----
;; Rules handlers used on this example are omited for code clarity
;; and them repsents a authorization logic for its name.

(def rules [{:pattern #"^/admin/.*"
             :handler {:or [admin-access operator-access]}}
            {:pattern #"^/login$"
             :handler any-access}
            {:pattern #"^/.*"
             :handler authenticated-access}])
----

.Define default behavior for not authorized requests
[source,clojure]
----
;; This functions works like default ring compatible handler
;; and should implement the default behavior for request
;; that are not authorized by any defined rule

(defn reject-handler
  [request]
  {:status 403
   :headers {}
   :body "Not authorized"})
----

.Wrap your handler with access rules (and run with jetty as example)
[source,clojure]
----
(defn -main
  [& args]
  (let [app (wrap-access-rules your-app-handler
                               :rules rules
                               :reject-handler reject-handler))]
    (run-jetty app {:port 9090}))
----

If no reject handler is specified, unauthorized exception is raised. These exception
can be captured by generic authorization middleware.


[NOTE]
The current request uri not match any regular expresion, the default policy enter in
action. The default policy in _buddy_ is `:allow` but you can change it to `:reject`
using keyword `:policy` on wrap-access-rules middleware.


An other way to use access rules is using `buddy.auth.accessrules/restrict` 
handler decorator that allows assign some rules to concrete handlers omiting
any url matching.

The usage of it can be easy, as shown with Compojure routes:

[source,clojure]
----
(require '[buddy.auth.accessrules :refer [restrict]])

(defroutes app
  (GET "/" [] (restrict my-home-ctrl
                        ;; Mandatory parameter
                        :rule user-access
                        ;; Optional parameter, in case if not passed
                        ;; default is used (defined by `wrap-access-rules` 
                        ;; middleware) or `throw-unauthorized` is raised 
                        ;; if default isn't available
                        :reject-handler reject-handler))
  (GET "/admin" (restrict my-admin-ctrl
                          :rule admin-access)))
----


Advanced Usage
--------------

[[how-it-works]]
How It Works
~~~~~~~~~~~~

Each backend implements two protocols: `IAuthentication` and `IAuthorization`.

*IAuthentication* provides two functions: `parse` and `authenticate`
and is automatically handled with `wrap-authentication` ring
middleware. This is an example flow for the http basic backend:

1. Received request is passed to `parse` function. This function extracts the +Authorization+
   header, decodes a base64 encoded string and returns Clojure map with `:username` and `:password`
   keys. If a parse error occured, it returns nil.
2. If the previous step parsed the token successfully, `authenticate` is called with current
   request and parsed data from previous step. `authenticate` can delegate authentication
   to user defined function passed as `:authfn` parameter to backend constructor.
   `authenticate` should return a request with `:identity` key assigned to nil or any other
   value. All requests with `:identity` key with nil value are considered not authenticated.
3. User handler is called.

[NOTE]
=========================
- `parse` function can return valid response, in that case response is returned inmediatel
  ignoring user handler.
- if `parse` function returns nil, `authenticate` function is ignored and user handler is
  called directly.
- `authenticate` also can return a valid response, in these case it has same behavior that
  with `parse` function.
=========================

*IAuthorization* provides `handle-unauthorized` function. Each backend implements it default
behavior but it can be overwritted with user defined function, passed on `:handle-unauthorized`
keyword parameter to backend constructor. It always should return a valid response.

Authorization is handled automatically with `wrap-authorization` ring middleware. It wraps
all request in try/catch block for intercept only authorization exception.

This is a flow that follows authorization middleware:

1. User handler is wrapped in try/catch block and executed.
2. Not authorized exception is raised with `buddy.auth/throw-unauthorized` function from
   any part of your handler.
3. handle-unauthorized is executed of your backend, if user has specified it own function,
   the user defined function is executed else, default behavior is executed.

Core library
------------

Behind the scenes, _buddy_ uses an internal library exposed in the
`buddy.core` namespace.  There are more low level functions here for
hash, hmac and coding that are used by other parts of _buddy_.


Cryptographic hash algorithms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

All hash algorithm implementations are found in the namespace
`buddy.core.hash`. There are two ways to work with the sha-2/md hash
functions.

This is buddy's naming convention:

- *make-<hashalgo>*: functions that matches this pattern always return byte array.
- *<hashalgo>*: functions that always return string that in almost all cases hex encoded.

*Available hash algorithms:*

- *sha256*
- *sha384*
- *sha512*
- *sha1*
- *md5*

Basic usage
^^^^^^^^^^^

.Import namespace example:
[source, clojure]
----
(require '[buddy.core.hash :refer [make-sha256, sha256]])
----

.Usage examples:
[source, clojure]
----
(sha256 "foo bar")
;; -> "fbc1a9f858ea9e177916964bd88c3d37b91a1e84412765e29950777f265c4b75"

(make-sha256 "foo bar")
;; -> #<byte[] [B@162a657e>
----

Advanced usage
^^^^^^^^^^^^^^

Hash functions are implemented using protocols.  We have seen how to
hash strings, but note that the same function works for *File*, *URL*,
*URI* and *InputStream*.

.Make hash of file example:
[source, clojure]
----
;; Additional import for easy open files
(require '[clojure.java.io :as io])

(sha256 (io/input-stream "/tmp/some-file"))
;; -> "bba878639499c8449f69efbfc699413eebfaf41d4b7a7faa560bfaf7e93a43dd"
----

You can extend it for your own types by using the
*buddy.core.hash/Digest* protocol:

[source,clojure]
----
(defprotocol Digest
  (make-digest [data algorithm]))
----

[NOTE]
Functions like *sha256*/*make-sha256* are aliases for the more generic
functions *digest*  and *make-digest*.


Hash-based message authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

buddy comes with two variants of *hmac*: standard and salted. Both are
available in `buddy.core.hmac` namespace. They also follow the
`make-<algo>` naming convention.

Basic usage
^^^^^^^^^^^

.Import namespace
[source, clojure]
----
(require '[buddy.core.hmac :as hmac])
----

.How to use standard hmac with string
[source, clojure]
----
(hmac/hmac-sha256 "foo bar" "mysecretkey")
;; -> "61849448bdbb67b39d609471eead667e65b0d1b9e01b1c3bf7aa56b83e9c8083"
----

.How to use salted variant of hmac with string
[source, clojure]
----
(hmac/salted-hmac-sha256 "foo bar" "salt" "mysecretkey")
;; -> "bd5f7a0040430a73f4845bac8f980c6398b4baae8a22efcc22038be0f4dd9678"
----

NOTE: The key parameter can be any type that implements the currently
undocumented *buddy.core.keys/ISecretKey* protocol (buddy comes with
default implementations for String and byte[])


Advanced usage
^^^^^^^^^^^^^^

Like the other hash functions, hmac is implemented using Clojure
protocols and is implementated for: String, byte[], *File*, *URL*,
*URI* and *InputStream*.


.Make hmac of file
[source,clojure]
----
;; Additional import for easy open files
(require '[clojure.java.io :as io])

(hmac/hmac-sha256 (io/input-stream "/tmp/somefile") "mysecretkey")
;; ->"4cb793e600848da2053238003fce4c010233c49df3e6a04119b4287eb464c27e"
----


You can extend it for your own types using the protocol *buddy.core.hmac/HMac*:

[source,clojure]
----
(defprotocol HMac
  (make-hmac [data key algorithm]))
----

[NOTE]
Functions like *hmac-sha256* just alias the more generic functions 
*hmac* and *salted-hmac*.


Codecs (binary -> string conversion)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO


Examples
--------

_buddy_ comes with some examples for helping a new user understand how
it works. All examples are available in the `examples/` directory.

At the moment, two examples are available:

- link:https://github.com/niwibe/buddy/tree/master/examples/sessionexample[Use session backend as authentication and authorization.]
- link:https://github.com/niwibe/buddy/tree/master/examples/oauthexample[Use session backend with oauth2 using Github api.]


To run examples, you should be in the project's root directory.
Execute `lein with-profile examplename run` where examplename can be
`sessionexample` or `oauthexample`.


How to contribute
-----------------

_buddy_ does not have many restrictions for contributing.

*For Bugfix*:

- Fork github repo.
- Fix a bug/typo on new branch.
- Make a pull-request to master.

*For New feature*:

- Open a new issue with new feature purpose.
- If it is accepted, follow same steps as "bugfix".


FAQ
---

*How can I use _buddy_ with link:http://clojure-liberator.github.io/liberator/[liberator]?*

By design, _buddy_ has authorization and authentication well
separated. This helps a lot if you want use only one part of it (ex:
authentencation only) without including the other.

The best combination is to use _buddy_'s authentication middleware
with liberator as the authorization system.

License
-------

[source,text]
----
Copyright 2014 Andrey Antukh <niwi@niwi.be>

Licensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----
